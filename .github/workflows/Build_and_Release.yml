name: Build and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Checks if commit contains word NEW or if manual dispatch
  Check_Commit:
    runs-on: windows-latest
    steps:
      - name: Check Commit Message
        run: |
          $eventName = '${{ github.event_name }}'
          if ($eventName -eq 'workflow_dispatch') {
            echo "Manual dispatch detected. Setting RUN_WORKFLOW to true."
            echo "commit_contains_new=true" >> $GITHUB_ENV
          } else {
            $commitMessage = (Get-Content $env:GITHUB_EVENT_PATH | ConvertFrom-Json).head_commit.message
            if ($commitMessage -like "*NEW*") {
              echo "Commit message contains 'NEW'."
              echo "commit_contains_new=true" >> $GITHUB_ENV
            } else {
              echo "Commit message does not contain 'NEW'."
              echo "commit_contains_new=false" >> $GITHUB_ENV
            }
          }
        shell: pwsh

  # Extracts version number
  Check_Version:
    needs: Check_Commit
    if: ${{ github.event_name == 'workflow_dispatch' || needs.Check_Commit.outputs.commit_contains_new == 'true' }}
    runs-on: windows-latest
    outputs:
      current_version: ${{ steps.extract_versions.outputs.current_version }}
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
        
      # Remove this after workflow is working
      - name: List Directory Contents
        run: |
          Get-ChildItem -Recurse
        shell: pwsh

      # extract the version number from '.csproj'
      - name: Extract version numbers
        id: extract_versions  # Add an id to this step to reference its outputs
        working-directory: D:\a\ActionTimelineEx\ActionTimelineEx
        run: |
          $csprojPath = "./ActionTimelineEx.csproj"
          $csprojXml = [xml](Get-Content $csprojPath)
          $version = $csprojXml.Project.PropertyGroup.Version
          echo "Project Version: $version"
          echo "::set-output name=current_version::$version"
  # build and release if the version number has been updated
  build:
    needs: Check_Version
    runs-on: windows-latest
    outputs:
     current_version: ${{ steps.extract_versions.outputs.project_version }}
    steps: 
      # Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # Remove this after workflow is working
      - name: List Directory Contents
        run: |
          Get-ChildItem -Recurse
        shell: pwsh

      # extract the version number from '.csproj'
      - name: Extract version numbers
        working-directory: D:\a\ActionTimelineEx\ActionTimelineEx
        run: |
          $ActionTimelineExPath = "./ActionTimelineEx.csproj"
        
          $ActionTimelineExXml = [xml](Get-Content $ActionTimelineExPath)
        
          $ActionTimelineExVersion = $ActionTimelineExsXml.Project.PropertyGroup.Version
        
          echo "Project 1 Version: $ActionTimelineExVersion"

      # dunno if needed  
      - name: Check Version Against Latest Release
        id: check_version
        run: |
          $latestReleaseTag = $(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)
          $versionActionTimelineEx = "${{ steps.get_version.outputs.version_ActionTimelineEx }}"
          if ($latestReleaseTag -eq $versionActionTimelineEx) {
            echo "::set-output name=cancel::true"
          } else {
            echo "::set-output name=cancel::false"
          }
        shell: pwsh

      # Sets up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
          
      # Restore Dependencies
      - name: Restore Dependencies
        run: dotnet restore

      # Download and extract Dalamud
      - name: Download Dalamud
        run: |
          Invoke-WebRequest -Uri https://goatcorp.github.io/dalamud-distrib/latest.zip -OutFile latest.zip
          Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev"

      # Builds ActionTimelineEx     
      - name: Build ActionTimelineEx
        run: |
          invoke-expression 'dotnet build --no-restore --configuration Release ActionTimelineEx'

      # list directory contents
      - name: List Directory Contents
        run: |
          Get-ChildItem -Recurse
        shell: pwsh

      # create release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.Check_Version.outputs.current_version }}
          release_name: Release v${{ needs.Check_Version.outputs.current_version }}
          draft: false
          prerelease: false

      # list directory contents
      - name: List Directory Contents
        run: |
          Get-ChildItem -Recurse
        shell: pwsh
      
      # Upload Assets


      # clean up on failure
      - name: Cleanup on failure
        if: failure()
        run: |
          gh release delete v${{ needs.Check_Version.outputs.current_version }} --yes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash